{
  "swagger": "2.0",
  "info": {
    "description": "Documentaci√≥n de API ",
    "version": "1.0.0",
    "title": "API BIBLIOTECA UNIVALLE",
    "contact": {
      "email": "vqg2021079@est.univalle.edu"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost",
  "basePath": "/univalle/v1",
  "tags": [
    {
      "name": "Student",
      "description": "Everything about your students"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/students": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Listado de estudiantes",
        "description": "",
        "operationId": "listStudent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Add a new student in the register",
        "description": "",
        "operationId": "addStudent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Student object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Student"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Student created"
          }
        }
      },
      "put": {
        "tags": [
          "Student"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Student"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/student/{id}": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Find student by ID",
        "description": "Returns a single student",
        "operationId": "getStudentbyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of student to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Student"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Student"
        ],
        "summary": "Updates a student in the register with form data",
        "description": "",
        "operationId": "updateStudentWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Student"
        ],
        "summary": "Deletes a Student",
        "description": "",
        "operationId": "deleteStudent",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/books": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Listado de libros",
        "description": "",
        "operationId": "listBook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Add a new book in the register",
        "description": "",
        "operationId": "addBook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "book object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Student created"
          }
        }
      },
      "put": {
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "description": "",
        "operationId": "updateBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/book/{id}": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Find student by ID",
        "description": "Returns a single book",
        "operationId": "getBookbyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "patch": {
        "tags": [
          "book"
        ],
        "summary": "Updates a book in the register with form data",
        "description": "",
        "operationId": "updateBooktWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "book"
        ],
        "summary": "Deletes a Book",
        "description": "",
        "operationId": "deleteBook",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/loan": {
      "get": {
        "tags": [
          "loan"
        ],
        "summary": "Listado de prestamos",
        "description": "",
        "operationId": "listLoan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "loan"
        ],
        "summary": "Add a new loan in the register",
        "description": "",
        "operationId": "addLoan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loan object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Loan created"
          }
        }
      },
      "put": {
        "tags": [
          "loan"
        ],
        "summary": "Update an existing loan",
        "description": "",
        "operationId": "updateLoan",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LOan object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/loan/{id}": {
      "get": {
        "tags": [
          "loan"
        ],
        "summary": "Find loan by ID",
        "description": "Returns a single loan",
        "operationId": "getLoanbyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of loan return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Loan not found"
          }
        }
      },
      "patch": {
        "tags": [
          "loan"
        ],
        "summary": "Updates a loan in the register with form data",
        "description": "",
        "operationId": "updateLoantWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the loan",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the loan",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "loan"
        ],
        "summary": "Deletes a Loan",
        "description": "",
        "operationId": "deleteLoan",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Loan id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Loan not found"
          }
        }
      }
    },
    "/reserve": {
      "get": {
        "tags": [
          "reserve"
        ],
        "summary": "Listado de reservas",
        "description": "",
        "operationId": "listReserve",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "reserve"
        ],
        "summary": "Add a new reserve in the register",
        "description": "",
        "operationId": "addReserve",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "reserve object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reserve"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "reserve created"
          }
        }
      },
      "put": {
        "tags": [
          "reserve"
        ],
        "summary": "Update an existing reserve",
        "description": "",
        "operationId": "updatereserve",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "reserve object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reserve"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "reserve not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/reserve/{id}": {
      "get": {
        "tags": [
          "reserve"
        ],
        "summary": "Find loan by ID",
        "description": "Returns a single loan",
        "operationId": "getreservebyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of loan return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Loan not found"
          }
        }
      },
      "patch": {
        "tags": [
          "reserve"
        ],
        "summary": "Updates a student in the register with form data",
        "description": "",
        "operationId": "updateReservetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "reserve"
        ],
        "summary": "Deletes a Student",
        "description": "",
        "operationId": "deleteReserve",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/author": {
      "get": {
        "tags": [
          "Author"
        ],
        "summary": "Listado de autores",
        "description": "",
        "operationId": "listAuthor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "Author"
        ],
        "summary": "Add a new Author in the register",
        "description": "",
        "operationId": "addAuthor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Author object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Author"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Author created"
          }
        }
      },
      "put": {
        "tags": [
          "Author"
        ],
        "summary": "Update an existing Author",
        "description": "",
        "operationId": "updateAuthor",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Author object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Author"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Author not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/Author/{id}": {
      "get": {
        "tags": [
          "Author"
        ],
        "summary": "Find loan by ID",
        "description": "Returns a single loan",
        "operationId": "getAuthorbyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Author return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Author"
        ],
        "summary": "Updates a student in the register with form data",
        "description": "",
        "operationId": "updateAuthorWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Author that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Author"
        ],
        "summary": "Deletes a Student",
        "description": "",
        "operationId": "deleteAuthor",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Author id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      }
    },
    "/Editorial": {
      "get": {
        "tags": [
          "Editorial"
        ],
        "summary": "Listado de editoriales",
        "description": "",
        "operationId": "listEditorial",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "Editorial"
        ],
        "summary": "Add a new Editorial in the register",
        "description": "",
        "operationId": "addEditorial",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Editorial object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Editorial"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Author created"
          }
        }
      },
      "put": {
        "tags": [
          "Editorial"
        ],
        "summary": "Update an existing Editorial",
        "description": "",
        "operationId": "updateEditorial",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Editorial object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Editorial"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Editorial not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/Editorial/{id}": {
      "get": {
        "tags": [
          "Editorial"
        ],
        "summary": "Find Editorial by ID",
        "description": "Returns a single loan",
        "operationId": "getEditorialbyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Editorial return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Editorial"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Editorial not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Editorial"
        ],
        "summary": "Updates a Editorial in the register with form data",
        "description": "",
        "operationId": "updateEditorialWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Editorial that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the Editorial",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the Editorial",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Editorial"
        ],
        "summary": "Deletes a Editorial",
        "description": "",
        "operationId": "deleteEditorial",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Editorial id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Editorial not found"
          }
        }
      }
    },
    "/Category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Listado de cateogorias",
        "description": "",
        "operationId": "listCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add a new Category in the register",
        "description": "",
        "operationId": "addCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update an existing Category",
        "description": "",
        "operationId": "updateCategory",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Category not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/Category/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Find loan by ID",
        "description": "Returns a single loan",
        "operationId": "getCategorybyid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Category return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Category"
        ],
        "summary": "Updates a Category in the register with form data",
        "description": "",
        "operationId": "updateCategoryWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Category that needs to be updated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Deletes a Category",
        "description": "",
        "operationId": "deleteCategory",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Author id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Student": {
      "type": "object",
      "required": [
        "name",
        "image",
        "age",
        "phone"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Juan"
        },
        "image": {
          "type": "string"
        },
        "age": {
          "type": "integer"
        },
        "phone": {
          "type": "string",
          "description": "phone's student"
        }
      }
    },
    "Book": {
      "type": "object",
      "required": [
        "title",
        "stateBook",
        "commentsBook"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string",
          "example": "Juan Quijote de la mancha"
        },
        "stateBook": {
          "type": "string"
        },
        "commentsBook": {
          "type": "integer"
        }
      }
    },
    "Loan": {
      "type": "object",
      "required": [
        "id_book",
        "id_student",
        "date"
      ],
      "properties": {
        "id_book": {
          "type": "string",
          "format": "uuid"
        },
        "id_student": {
          "type": "string",
          "example": "CVG-0503"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "reserve": {
      "type": "object",
      "required": [
        "id_book",
        "id_student",
        "date"
      ],
      "properties": {
        "id_book": {
          "type": "string",
          "format": "uuid"
        },
        "id_student": {
          "type": "string",
          "example": "CVG-0503"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "Author": {
      "type": "object",
      "required": [
        "id_author",
        "name_Author",
        "country"
      ],
      "properties": {
        "id_author": {
          "type": "string",
          "format": "uuid"
        },
        "name_Author": {
          "type": "string",
          "example": "Ensias sangrantes"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "Editorial": {
      "type": "object",
      "required": [
        "id_editorial",
        "name_editorial",
        "direction",
        "contact_phone"
      ],
      "properties": {
        "id_editorial": {
          "type": "string",
          "format": "uuid"
        },
        "name_editorial": {
          "type": "string",
          "example": "Editorial PS"
        },
        "direction": {
          "type": "string"
        },
        "contact_phone": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id_category",
        "name_category"
      ],
      "properties": {
        "id_category": {
          "type": "string",
          "format": "uuid"
        },
        "name_category": {
          "type": "string",
          "example": "Medicina"
        },
        "country": {
          "type": "string"
        }
      }
    }
  }
}